Task 1
1.Our group has completed 2 complete versions of Project 2. Fortunately in Task 1 we did not run into any deadlock issues in Verson 1 or Version 2 of our Project.

2.
			Philosophers	Meals	Ticks	
	rs 3535	Test 1	3		3	487
	rs 8321 Test 2	17		7	1662
	rs 3214	Test 3	12		45	5658


Task 2
1.			Philosophers	Meals	Ticks
	rs 3535	Test 1	3		3	626
	rs 8321	Test 2	17		7	2213
	rs 3214	Test 3	12		45	6252

2. If the current thread is yielded on the task 2 between picking up the left and right chopstick all philosophers sit down, pick up left chopstick, and then they all also pick up the right chopstick somehow. If the same yield is inserted into task 1 we end up with a deadlock situation.

Task 3
1. In one version we made a loop so that if a person tries to send a message to another person 5 times and their mailbox is full all 5 times then they send the message to another person because the deadlock that we had in this version was caused by waiting for a mailbox to have space. The other version I am not very familiar with.

Task 4
1. In version 1 of Project 2 we had the same exact deadlock problem because some of the same functions were being used so the solution was the same as in Task 3.

Task 6

1. 
In Task 1 the number of philosophers and number of meals is asked for and then a boolean array is created and initialized to false. The threads are then created and forked to a dining function which calls other functions to pick up and put down chopsticks, eat, and think. Busy waiting loops are used in the eat and think functions. The biggest issue we had here was getting the philosophers to eat again if there were more meals. This was solved by moving some brackets and adding a while loop.

Task 2 was one of the hardest tasks for our group because it was the first time that semaphores were used and none of our group members were extremely familiar with them or how they were used but it was not much different from task 1 as far as how the problem was solved. The only difference here is that there was an array of semaphores initialized to a value of 2 and when the value reached 0 then the philosopher could eat.

Task 3 was completed by constructing a 2 dimensional array with the first space in each column containing the person's name and the rest of the space in each column containing their messages. After the array was made the threads were forked to a postoffice function which then called functions for waiting, reading mail, writing mail, checking if a mailbox was full, and checking to see if each person has mail at all and also the current thread was yielded to aide in the prevention of deadlock.

Task 4 was completed in almost the exact same way as task 3 except some changes needed to be made to accomodate the use of semaphores. The two dimensional array was created and structured the same way but when the threads forked they were sent to a different postoffice function which used semaphores. Also another array of semaphores was created initialized to the same value as the size of each mailbox. One of the greatest obstacles in this task was to get the semaphores declared and working properly. A few searches and a quick look through some of the forums helped to solve this issue.

2. In task 1 we used an array of booleans for chopsticks.

   In task 2 we used an array of semaphores to control access to chopsticks.
   The algorithm contained mostly while loops and for loops.

   In task 3 we used a 2 dimensional array for mailboxes, the first row      	contained the name of the person and all other memory spaces on each      	column contained the messages for that person.

   In task 4 the 2 dimensional array was used again and structured the same 
   way but there was also an array of semaphores to control access to the 
   messages in the mailbox. In this task there was a problem with deadlock  
   so we used a for loop that made the sender send the message to another 
   person if the sender tried to send the message to a recipient 5 times and
   the recipient's mailbox was full every time.

   

